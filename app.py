"""
üçΩÔ∏è APP.PY - INTERFAZ PRINCIPAL SIMPLIFICADA
Aplicaci√≥n Streamlit para procesamiento de reportes de comedores comunitarios
Versi√≥n 2.0 - Arquitectura modular con extracci√≥n estructurada
"""

import streamlit as st
from datetime import datetime

# üì¶ IMPORTAR M√ìDULOS LOCALES
try:
    from excel_processor import ExcelProcessor
    from data_extractor import DataExtractor
    from utils import UtilsHelper, FileValidator
    PROCESAMIENTO_DISPONIBLE = True
except ImportError as e:
    st.error(f"‚ùå Error importando m√≥dulos de procesamiento: {e}")
    PROCESAMIENTO_DISPONIBLE = False

# üìÑ IMPORTAR M√ìDULOS DE PDF
try:
    from pdf_generator import GeneradorPDFsRutas
    PDF_DISPONIBLE = True
except ImportError:
    PDF_DISPONIBLE = False

# üìß IMPORTAR M√ìDULOS DE EMAIL
try:
    from email_sender import enviar_correo_con_adjuntos
    EMAIL_DISPONIBLE = True
except ImportError:
    EMAIL_DISPONIBLE = False

# üìä IMPORTAR M√ìDULOS DE GOOGLE SHEETS
try:
    from google_sheets_handler import GoogleSheetsHandler
    GDRIVE_DISPONIBLE = True
except ImportError:
    GDRIVE_DISPONIBLE = False

# üé® CONFIGURACI√ìN DE LA P√ÅGINA
st.set_page_config(
    page_title="Procesador de Reportes v2.0 - CHVS",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

def mostrar_sidebar():
    """
    üìã Muestra informaci√≥n en la barra lateral
    """
    with st.sidebar:
        st.header("üìã Procesador v2.0")
        
        st.markdown("""
        **üéØ Nuevas caracter√≠sticas:**
        
        ‚úÖ **Extracci√≥n estructurada**
        - Programa, Empresa, Modalidad (separados)
        - Solicitud de Remesa (fila 8)
        - D√≠as de Consumo (fila 9)
        
        ‚úÖ **Tipos soportados:**
        - Comedores Comunitarios
        - Consorcio Alimentando a Cali
        - Valle Solidario Buga
        - Valle Solidario Yumbo
        
        ‚úÖ **Productos detectados:**
        - üê∑ Carne de Cerdo (KG/B X 1000)
        - üêÑ Carne de Res (KG)
        - üêî Muslo/Contramuslo (UND)
        - üêî Pechuga Pollo (KG)
        """)
        
        st.markdown("---")
        
        # Estado de m√≥dulos
        st.subheader("üîß Estado de M√≥dulos")
        if PROCESAMIENTO_DISPONIBLE:
            st.success("‚úÖ Procesamiento habilitado")
        else:
            st.error("‚ùå Error en procesamiento")
            
        if PDF_DISPONIBLE:
            st.success("‚úÖ Generaci√≥n de PDFs")
        else:
            st.warning("‚ö†Ô∏è PDFs no disponibles")
            
        if EMAIL_DISPONIBLE:
            st.success("‚úÖ Env√≠o de correos")
        else:
            st.warning("‚ö†Ô∏è Correos no disponibles")
            
        if GDRIVE_DISPONIBLE:
            st.success("‚úÖ Google Sheets")
        else:
            st.warning("‚ö†Ô∏è Google Sheets no disponibles")
        
        st.markdown("---")
        st.markdown("**üöÄ Versi√≥n 2.0**\nArquitectura modular")

def mostrar_tab_procesamiento():
    """
    üìä Tab principal de procesamiento de m√∫ltiples archivos
    """
    st.header("üìÅ Procesamiento de Archivos Excel")
    
    if not PROCESAMIENTO_DISPONIBLE:
        st.error("‚ùå **M√≥dulos de procesamiento no disponibles**")
        st.info("Verifica que todos los archivos .py est√©n en la carpeta correcta")
        return
    
    # üìÅ SECCI√ìN DE CARGA M√öLTIPLE DE ARCHIVOS
    col1, col2 = st.columns([2, 1])
    
    with col1:
        archivos_subidos = st.file_uploader(
            "üîÑ Selecciona uno o m√°s archivos Excel (.xlsx, .xls)",
            type=['xlsx', 'xls'],
            accept_multiple_files=True,
            help="Puedes arrastrar y soltar varios archivos a la vez."
        )
    
    with col2:
        if archivos_subidos:
            st.success(f"‚úÖ {len(archivos_subidos)} archivo(s) cargado(s)")
        else:
            st.info("‚è≥ Esperando archivos...")
    
    # üîÑ PROCESAR ARCHIVOS
    if archivos_subidos and PROCESAMIENTO_DISPONIBLE:
        # Checkbox para modo debug
        modo_debug = st.checkbox("üêõ Modo Debug (mostrar logs detallados)", value=False)
        
        lista_de_resultados = []
        all_dataframes = []
        
        # Procesar cada archivo
        for i, archivo in enumerate(archivos_subidos):
            # Validaci√≥n previa del archivo
            es_valido, mensaje = FileValidator.validar_archivo_excel(archivo)
            if not es_valido:
                st.error(f"‚ùå {archivo.name}: {mensaje}")
                continue
            
            with st.spinner(f"üîÑ Procesando {archivo.name} ({i+1}/{len(archivos_subidos)})..."):
                # Inicializar procesador
                processor = ExcelProcessor()
                
                # Capturar logs si est√° en modo debug
                if modo_debug:
                    import io
                    import sys
                    
                    # Redirigir prints a un buffer
                    old_stdout = sys.stdout
                    sys.stdout = buffer = io.StringIO()
                
                # Procesar archivo completo
                resultado = processor.procesar_archivo_completo(archivo)
                df_procesado, num_registros, tipo_archivo, info_extraida = resultado
                
                # Mostrar logs si est√° en modo debug
                if modo_debug:
                    sys.stdout = old_stdout
                    logs = buffer.getvalue()
                    if logs:
                        st.subheader(f"üêõ Logs de Debug - {archivo.name}")
                        st.code(logs, language="text")
            
            if df_procesado is not None and num_registros > 0:
                # Almacenar resultado
                lista_de_resultados.append({
                    'nombre_archivo': archivo.name,
                    'df': df_procesado,
                    'info_extraida': info_extraida,
                    'num_registros': num_registros
                })
                all_dataframes.append(df_procesado)
            else:
                st.error(f"‚ùå No se pudieron procesar los datos del archivo {archivo.name}")
        
        # Mostrar resultados por archivo
        if lista_de_resultados:
            st.header("üìä Resumen por Archivo")
            
            for resultado in lista_de_resultados:
                st.subheader(f"üìÑ {resultado['nombre_archivo']}")
                
                # Mostrar resumen b√°sico
                df = resultado['df']
                info = resultado['info_extraida']
                
                # M√©tricas clave
                col1, col2, col3, col4, col5 = st.columns(5)
                with col1:
                    st.metric("Programa", info.get('programa', 'N/A')[:20] + "..." if len(str(info.get('programa', 'N/A'))) > 20 else info.get('programa', 'N/A'))
                with col2:
                    st.metric("üë• Beneficiarios", int(df['COBER'].sum()) if 'COBER' in df.columns else 0)
                with col3:
                    st.metric("üê∑ Cerdo (kg)", f"{df['CARNE_DE_CERDO'].sum():.1f}" if 'CARNE_DE_CERDO' in df.columns else "0.0")
                with col4:
                    st.metric("üêÑ Res (kg)", f"{df['CARNE_DE_RES'].sum():.1f}" if 'CARNE_DE_RES' in df.columns else "0.0")
                with col5:
                    st.metric("üêî Muslo (und)", int(df['MUSLO_CONTRAMUSLO'].sum()) if 'MUSLO_CONTRAMUSLO' in df.columns else 0)
                
                # Vista previa del DataFrame
                st.caption("Vista previa (10 primeras filas):")
                st.dataframe(df.head(10), use_container_width=True)
                
                st.markdown("---")
            
            # Consolidar todos los DataFrames
            if all_dataframes:
                import pandas as pd
                df_combinado = pd.concat(all_dataframes, ignore_index=True)
                st.session_state.df_procesado = df_combinado
                st.session_state.info_extraida = lista_de_resultados[0]['info_extraida']  # Usar info del primer archivo
                st.session_state.tipo_archivo = 'MULTIPROCESADO'
                
                st.success(f"‚úÖ {len(archivos_subidos)} archivos procesados exitosamente. {len(df_combinado)} registros totales consolidados.")
                
                # ---- NUEVA SECCI√ìN PARA GUARDAR EN GOOGLE SHEETS ----
                if GDRIVE_DISPONIBLE:
                    st.info("Todos los datos procesados se han consolidado y est√°n listos para ser guardados.")
                    
                    if st.button("üíæ Guardar Datos Consolidados en Google Sheets"):
                        with st.spinner("Conectando con Google Sheets y guardando datos..."):
                            try:
                                # Inicializar el handler con los secretos
                                handler = GoogleSheetsHandler(st.secrets["google_sheets"])
                                
                                # Obtener el DataFrame combinado
                                df_a_guardar = st.session_state.df_procesado
                                
                                # Nombre de la hoja de destino
                                worksheet_name = "reporte_congelados"
                                
                                # Llamar al m√©todo para a√±adir los datos
                                exito, mensaje = handler.append_to_sheet(
                                    df=df_a_guardar,
                                    worksheet_name=worksheet_name
                                )
                                
                                if exito:
                                    st.success(mensaje)
                                else:
                                    st.error(mensaje)
                            
                            except Exception as e:
                                st.error(f"Error al inicializar el Google Sheets Handler: {e}")
                                st.warning("Aseg√∫rate de haber configurado correctamente la secci√≥n [google_sheets] en tu archivo secrets.toml.")
            
        else:
            st.error("‚ùå No se pudo procesar ning√∫n archivo")
            mostrar_ayuda_troubleshooting()


def enviar_correo_completo(destinatarios, asunto, incluir_excel, incluir_pdfs, config_pdfs):
    """
    üì§ Env√≠a correo con adjuntos configurados
    """
    with st.spinner("üì§ Preparando y enviando correo..."):
        try:
            archivos_adjuntos = []
            df_procesado = st.session_state.df_procesado
            info_extraida = st.session_state.get('info_extraida', {})
            tipo_archivo = st.session_state.get('tipo_archivo', 'PROCESADO')
            
            # Generar Excel si se solicita
            if incluir_excel:
                excel_buffer = UtilsHelper.crear_excel_descarga_universal(df_procesado, tipo_archivo, info_extraida)
                nombre_excel = UtilsHelper.generar_nombre_archivo_unico("reporte_correo")
                archivos_adjuntos.append({
                    'buffer': excel_buffer,
                    'nombre': nombre_excel
                })
            
            # Generar PDFs si se solicita
            if incluir_pdfs and PDF_DISPONIBLE:
                from pdf_generator import GeneradorPDFsRutas
                generador = GeneradorPDFsRutas()
                modo = "por_comedor" if config_pdfs.get('modo_pdf') == "Un PDF por comedor" else "por_ruta"
                
                zip_buffer, num_pdfs = generador.generar_todos_los_pdfs(
                    df_procesado,
                    modo=modo,
                    elaborado_por=config_pdfs.get('elaborado_por', "Supervisor"),
                    dictamen=config_pdfs.get('dictamen', "APROBADO"),
                    lotes_personalizados=config_pdfs.get('lotes_personalizados', {})
                )
                
                nombre_zip = UtilsHelper.generar_nombre_archivo_unico("guias_correo", "zip")
                archivos_adjuntos.append({
                    'buffer': zip_buffer,
                    'nombre': nombre_zip
                })
            
            # Crear mensaje HTML
            estadisticas = UtilsHelper.extraer_estadisticas_rapidas(df_procesado)
            mensaje_html = UtilsHelper.crear_mensaje_html_correo(estadisticas, info_extraida)
            
            # Enviar correo
            exito = enviar_correo_con_adjuntos(
                destinatarios=destinatarios,
                asunto=asunto,
                cuerpo_mensaje=mensaje_html,
                adjuntos=archivos_adjuntos
            )
            
            if exito:
                st.success(f"‚úÖ Correo enviado a {len(destinatarios)} destinatarios")
                st.info(f"üìé Adjuntos: {len(archivos_adjuntos)} archivos")
            else:
                st.error("‚ùå Error enviando el correo")
                
        except Exception as e:
            st.error(f"‚ùå Error: {str(e)}")

def mostrar_tab_generar_y_enviar():
    """
    üìÑ Tab unificado para generaci√≥n de PDFs y env√≠o de correos
    """
    if 'df_procesado' not in st.session_state:
        st.warning("‚ö†Ô∏è Primero procesa archivos en la pesta√±a de datos.")
        return
    
    # SECCI√ìN 1: GENERACI√ìN DE PDFs
    st.header("üìÑ Generaci√≥n de Gu√≠as de Transporte (PDFs)")
    
    if not PDF_DISPONIBLE:
        st.error("üö´ **Funcionalidad de PDFs no disponible**")
        st.info("Para habilitar: `pip install reportlab`")
        pdf_config_disponible = False
    else:
        pdf_config_disponible = True
        
        # Configuraci√≥n de PDFs
        col1, col2, col3 = st.columns(3)
        
        with col1:
            modo_pdf = st.radio(
                "üìã Modo de generaci√≥n:",
                ["Un PDF por ruta", "Un PDF por comedor"],
                key="modo_generacion_pdf"
            )
        
        with col2:
            nombres = [
                "Shirley Paola Ibarra", "Jeferson Soto", "Alexandra Luna", "Alexander Molina",
                "Leidy Guzman", "Andres Montenegro", "Isabela Pantoja", "Luis Rodriguez","Estefania Loaiza Castro"
            ]
            elaborado_por = st.selectbox(
                "üë§ Elaborado por:", nombres,
                key="elaborado_por_pdf"
            )
        
        with col3:
            dictamen = st.selectbox(
                "‚úÖ Dictamen:", 
                ["APROBADO", "APROBADO CONDICIONADO"],
                key="dictamen_pdf"
            )
        
        # Configuraci√≥n de lotes
        with st.expander("üè∑Ô∏è Configuraci√≥n de Lotes (Opcional)"):
            col1, col2 = st.columns(2)
            with col1:
                lote_cerdo = st.text_input("üê∑ Lote Cerdo:", placeholder="CERDO-2025-001")
                lote_muslo = st.text_input("üêî Lote Muslo/Contramuslo:", placeholder="MC-2025-A1")
            with col2:
                lote_pechuga = st.text_input("üêî Lote Pechuga:", placeholder="POLLO-240122")
                lote_res = st.text_input("üêÑ Lote Res:", placeholder="RES-010225")
        
        lotes_personalizados = {
            'cerdo': lote_cerdo.strip() if lote_cerdo.strip() else None,
            'pechuga': lote_pechuga.strip() if lote_pechuga.strip() else None,
            'muslo': lote_muslo.strip() if lote_muslo.strip() else None,
            'res': lote_res.strip() if lote_res.strip() else None
        }
        
        # Bot√≥n de generaci√≥n de PDFs
        if st.button("üìÑ Generar ZIP de PDFs", type="primary"):
            with st.spinner("üìÑ Generando PDFs con paginaci√≥n de 4 filas..."):
                generador = GeneradorPDFsRutas()
                modo = "por_comedor" if modo_pdf == "Un PDF por comedor" else "por_ruta"
                
                zip_buffer, num_pdfs = generador.generar_todos_los_pdfs(
                    st.session_state.df_procesado,
                    modo=modo,
                    elaborado_por=elaborado_por,
                    dictamen=dictamen,
                    lotes_personalizados=lotes_personalizados
                )
                
                nombre_zip = UtilsHelper.generar_nombre_archivo_unico(f"guias_{modo}", "zip")
                
                st.download_button(
                    label=f"üì¶ Descargar ZIP ({num_pdfs} PDFs)",
                    data=zip_buffer,
                    file_name=nombre_zip,
                    mime="application/zip"
                )
                
                st.success(f"‚úÖ {num_pdfs} PDFs generados correctamente")
    
    # SEPARADOR
    st.markdown("---")
    
    # SECCI√ìN 2: ENV√çO DE CORREOS
    st.header("üìß Env√≠o de Reportes por Correo")
    
    if not EMAIL_DISPONIBLE:
        st.error("üö´ **Funcionalidad de correo no disponible**")
        st.info("Configura el archivo `secrets.toml` correctamente")
        return
    
    # üìß CORREOS PREDEFINIDOS
    correos_predefinidos = [
        "supervisorcalidad1@vallesolidario.com",
        "supervisorcalidad2@vallesolidario.com", 
        "supervisorcalidad3@vallesolidario.com",
        "supervisorcalidad4@vallesolidario.com",
        "supervisorcalidad5@vallesolidario.com",
        "jefedecalidad@vallesolidario.com",
        "despachos.chvs@gmail.com"
    ]
    
    # Configuraci√≥n b√°sica
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìß Configuraci√≥n de Destinatarios**")
        
        # ‚úÖ CHECKBOX PARA USAR CORREOS PREDEFINIDOS
        usar_predefinidos = st.checkbox(
            "üìã Usar lista predefinida de correos", 
            value=True,
            key="usar_correos_predefinidos",
            help="Lista de correos de Valle Solidario y supervisores de calidad"
        )
        
        if usar_predefinidos:
            st.success(f"‚úÖ **{len(correos_predefinidos)} correos predefinidos seleccionados:**")
            for email in correos_predefinidos:
                st.write(f"‚Ä¢ {email}")
            
            correos_adicionales = st.text_area(
                "üìé Correos adicionales (opcional):",
                placeholder="correo1@ejemplo.com\ncorreo2@ejemplo.com",
                height=80,
                help="Agrega correos adicionales si necesitas enviar a m√°s personas",
                key="correos_adicionales_area"
            )
            
            destinatarios_list = correos_predefinidos.copy()
            if correos_adicionales.strip():
                adicionales = [email.strip() for email in correos_adicionales.split('\n') if email.strip()]
                destinatarios_list.extend(adicionales)
                st.info(f"üìé Se agregar√°n {len(adicionales)} correos adicionales")
            
            destinatarios_text = '\n'.join(destinatarios_list)
            
        else:
            destinatarios_text = st.text_area(
                "üìß Destinatarios (uno por l√≠nea):",
                placeholder="ejemplo1@correo.com\nejemplo2@correo.com",
                height=120,
                key="destinatarios_manual_area"
            )
    
    with col2:
        st.markdown("**üìù Configuraci√≥n del Mensaje**")
        asunto = st.text_input(
            "üìù Asunto:",
            value=f"Reporte Comedores Valle Solidario - {datetime.now().strftime('%Y-%m-%d')}",
            key="asunto_correo"
        )
        
        total_destinatarios = len([email for email in destinatarios_text.split('\n') if email.strip()])
        st.metric("üë• Total Destinatarios", total_destinatarios)
    
    # Configuraci√≥n de adjuntos
    st.markdown("**üìé Configuraci√≥n de Adjuntos**")
    col1, col2 = st.columns(2)
    with col1:
        incluir_excel = st.checkbox("üìä Incluir Excel", value=True, key="incluir_excel_correos")
    with col2:
        incluir_pdfs = st.checkbox("üìÑ Incluir PDFs", value=True, key="incluir_pdfs_correos")
    
    # Bot√≥n de env√≠o
    if st.button("üì§ Enviar Correo", type="primary"):
        destinatarios = [email.strip() for email in destinatarios_text.split('\n') if email.strip()]
        
        if not destinatarios or not asunto.strip():
            st.error("‚ùå Completa destinatarios y asunto")
            return
        
        if not incluir_excel and not incluir_pdfs:
            st.error("‚ùå Selecciona al menos un tipo de adjunto")
            return
        
        # Crear configuraci√≥n para PDFs si se incluyen
        config_pdfs = {}
        if incluir_pdfs and pdf_config_disponible:
            config_pdfs = {
                'modo_pdf': modo_pdf,
                'elaborado_por': elaborado_por,
                'dictamen': dictamen,
                'lotes_personalizados': lotes_personalizados
            }
        
        enviar_correo_completo(destinatarios, asunto, incluir_excel, incluir_pdfs, config_pdfs)

def mostrar_ayuda_troubleshooting():
    """
    üîß Muestra ayuda para resoluci√≥n de problemas
    """
    with st.expander("üîß Ayuda para resoluci√≥n de problemas"):
        st.markdown("""
        ### üéØ **Tipos de archivos soportados (v2.0):**
        
        1. **Comedores Comunitarios** - Rutas: "DIA X - RUTA Y"
        2. **Consorcio Alimentando a Cali** - Rutas: "CONGELADOS RUTA X"
        3. **Valle Solidario Buga** - Empresas con "BUGA"
        4. **Valle Solidario Yumbo** - Empresas con "YUMBO"
        
        ### üìã **Estructura requerida:**
        
        - **Fila 4**: `PROGRAMA:X - EMPRESA / MODALIDAD`
        - **Fila 8**: `Solicitud Remesa: VALOR`
        - **Fila 9**: `Dias de consumo: VALOR`
        - **Columnas F, G, H (si existen)**: Productos con unidades (KG, UND, B X 1000)
        
        ### üîç **Productos espec√≠ficos detectados:**
        
        - `CARNE DE CERDO MAGRA / B X 1000` o `/ KG`
        - `MUSLO / CONTRAMUSLO DE POLLO UND / UND`
        - `PECHUGA POLLO / KG`
        - `CARNE DE RES, MAGRA / KG`
        
        ### ‚ö†Ô∏è **Problemas comunes:**
        
        - **Archivo muy peque√±o**: Debe tener al menos 15 filas y 6 columnas (A-F)
        - **Fila 4 vac√≠a**: Debe contener informaci√≥n del programa
        - **Columnas vac√≠as**: F (y G, H si existen) deben tener datos de productos
        - **Formato de fecha**: Usar YYYY-MM-DD en d√≠as de consumo
        """)

def main():
    """
    üè† Funci√≥n principal de la aplicaci√≥n
    """
    # T√≠tulo principal
    st.title("üçΩÔ∏è Procesador de Reportes v2.0 - CHVS")
    st.markdown("---")
    
    # Mostrar sidebar
    mostrar_sidebar()
    
    # Crear tabs principales
    tab1, tab2 = st.tabs(["üìä Procesar Archivos", "üìÑ Generar y Enviar Reportes"])
    
    with tab1:
        mostrar_tab_procesamiento()
    
    with tab2:
        mostrar_tab_generar_y_enviar()

if __name__ == "__main__":
    main()